name: 'JavaScript - Neo'
scopeName: 'source.js'
type: 'tree-sitter'
parser: 'tree-sitter-javascript'

fileTypes: ['js', 'jsx']

injectionRegex: '^js$|^JS$|javascript|JavaScript'

firstLineRegex: [
  # shebang line
  '^#!.*\\b(node)\\r?\\n'

  # vim modeline
  'vim\\b.*\\bset\\b.*\\b(filetype|ft|syntax)=(js|javascript)'
]

folds: [
  {
    type: 'comment'
  }
  {
    type: ['jsx_element', 'template_string'],
    start: {index: 0}
    end: {index: -1}
  }
  {
    type: 'jsx_self_closing_element'
    start: {index: 1}
    end: {index: -2}
  }
  {
    start: {index: 0, type: '{'}
    end: {index: -1, type: '}'}
  }
  {
    start: {index: 0, type: '['}
    end: {index: -1, type: ']'}
  }
  {
    start: {index: 0, type: '('}
    end: {index: -1, type: ')'}
  }
  {
    type: ['switch_case', 'switch_default']
    start: {index: 0}
    end: {type: 'break_statement', index: -1}
  }
  {
    type: ['switch_case', 'switch_default']
    start: {index: 0}
  }
]

comments:
  start: '// '

scopes:
  'program': 'source.js'

  # 'property_identifier': [
  #   {
  #     match: '^[\$A-Z_]+$',
  #     scopes: 'constant.other.property'
  #   }
  # 
  #   'variable.other.object.property'
  # ]
  # 
  # 'member_expression > property_identifier': 'variable.other.object.property.unquoted'
  # 
  # 'formal_parameters > identifier': 'variable.parameter.function'
  # 'formal_parameters > rest_parameter > identifier': 'variable.parameter.rest.function'
  # 
  # 'shorthand_property_identifier': [
  #   {
  #     match: '^[\$A-Z_]{2,}$',
  #     scopes: 'constant.other'
  #   }
  # ]
  # 
  # '
  #   class > identifier,
  #   new_expression > identifier
  # ': 'meta.class'
  # 
  # '
  #   jsx_opening_element > identifier,
  #   jsx_closing_element > identifier,
  #   jsx_self_closing_element > identifier
  # ': [
  #   {
  #     match: '^[A-Z]',
  #     scopes: 'meta.class.component.jsx'
  #   }
  # ]
  # 
  # 'call_expression > identifier': {match: '^[A-Z]', scopes: 'meta.class'}
  # 'arrow_function > identifier:nth-child(0)': 'variable.parameter.function'
  # 
  # 'function > identifier': 'entity.name.function'
  # 'function_declaration > identifier': 'entity.name.function'
  # 'generator_function > identifier': 'entity.name.function'
  # 
  # 'call_expression > identifier': [
  #   {match: '^require$', scopes: 'support.function'},
  #   'entity.name.function'
  # ]
  # 
  # 'call_expression > super': 'support.function.super'
  # 
  # 'method_definition > property_identifier': 'entity.name.function'
  # 'call_expression > member_expression > property_identifier': 'entity.name.function'
  # 
  # 'identifier': [
  #   {
  #     match: '^(global|module|exports|__filename|__dirname)$',
  #     scopes: 'support.variable'
  #   },
  #   {
  #     match: '^(window|event|document|performance|screen|navigator|console)$'
  #     scopes: 'support.variable.dom'
  #   },
  #   {
  #     exact: 'require',
  #     scopes: 'support.function'
  #   },
  #   {
  #     match: '^[\$A-Z_]{2,}$',
  #     scopes: 'constant.other'
  #   },
  #   {
  #     match: '^[A-Z]',
  #     scopes: 'meta.class'
  #   },
  # ]
  # 
  # 'number': 'constant.numeric'
  # 'string': 'string.quoted'
  # 'regex': 'string.regexp'
  # 'escape_sequence': 'constant.character.escape'
  # 'template_string': 'string.quoted.template'
  # 'undefined': 'constant.language'
  # 'null': 'constant.language.null'
  # 'true': 'constant.language.boolean.true'
  # 'false': 'constant.language.boolean.false'
  # 'comment': [
  #   {
  #     match: "^//",
  #     scopes: 'comment.line'
  #   },
  #   'comment.block'
  # ]
  # 'hash_bang_line': 'comment.block'
  # 
  # '
  #   jsx_expression > "{",
  #   jsx_expression > "}",
  #   template_substitution > "${",
  #   template_substitution > "}"
  # ': 'punctuation.section.embedded'
  # 'template_substitution': 'embedded.source'
  # 
  # # default unknown punctuation
  # '";"': 'punctuation.terminator.statement.semicolon'
  # '"."': 'punctuation.separator.period'
  # '","': 'punctuation.separator.comma'
  # '"("': 'punctuation.section.bracket.round'
  # '")"': 'punctuation.section.bracket.round'
  # '"{"': 'punctuation.section.bracket.curly'
  # '"}"': 'punctuation.section.bracket.curly'
  # '"["': 'punctuation.section.bracket.square'
  # '"]"': 'punctuation.section.bracket.square'
  # 
  # new object
  'object > "{"': 'punctuation.section.bracket.curly punctuation.definition.dictionary'
  'object > "}"': 'punctuation.section.bracket.curly punctuation.definition.dictionary'
  
  # new list
  'array > "["': 'punctuation.section.bracket.square punctuation.definition.array'
  'array > "]"': 'punctuation.section.bracket.square punctuation.definition.array'
  
  # subscript
  'subscript_expression > "["': 'punctuation.section.bracket.square punctuation.section.subscript'
  'subscript_expression > "]"': 'punctuation.section.bracket.square punctuation.section.subscript'
  
  # function call
  'arguments > "("': 'punctuation.section.bracket.round punctuation.section.arguments'
  'arguments > ")"': 'punctuation.section.bracket.round punctuation.section.arguments'
  
  # function definition
  'function > formal_parameters > "("':       'punctuation.section.bracket.round punctuation.definition.parameters'
  'function > formal_parameters > ")"':       'punctuation.section.bracket.round punctuation.definition.parameters'
  'function > statement_block > "{"':         'punctuation.section.bracket.curly punctuation.definition.function.body'
  'function > statement_block > "}"':         'punctuation.section.bracket.curly punctuation.definition.function.body'
  'arrow_function > formal_parameters > "("': 'punctuation.section.bracket.round punctuation.definition.parameters'
  'arrow_function > formal_parameters > ")"': 'punctuation.section.bracket.round punctuation.definition.parameters'
  'arrow_function > statement_block > "{"':   'punctuation.section.bracket.curly punctuation.definition.function.body'
  'arrow_function > statement_block > "}"':   'punctuation.section.bracket.curly punctuation.definition.function.body'
  # 
  # '"var"': 'storage.type'
  # '"let"': 'storage.type'
  # '"class"': 'storage.type'
  # '"extends"': 'storage.modifier'
  # '"const"': 'storage.modifier'
  # '"static"': 'storage.modifier'
  # '"function"': 'storage.type.function'
  # '"=>"': 'storage.type.function.arrow'
  # 
  # '"="': 'keyword.operator.assignment'
  # '"+="': 'keyword.operator.assignment'
  # '"-="': 'keyword.operator.assignment'
  # '"*="': 'keyword.operator.assignment'
  # '"/="': 'keyword.operator.assignment'
  # '"%="': 'keyword.operator.assignment'
  # '"<<="': 'keyword.operator.assignment'
  # '">>="': 'keyword.operator.assignment'
  # '">>>="': 'keyword.operator.assignment'
  # '"&="': 'keyword.operator.assignment'
  # '"^="': 'keyword.operator.assignment'
  # '"|="': 'keyword.operator.assignment'
  # '"!"': 'keyword.operator'
  # '"+"': 'keyword.operator'
  # '"-"': 'keyword.operator'
  # '"*"': 'keyword.operator'
  # '"/"': 'keyword.operator'
  # '"%"': 'keyword.operator'
  # '"=="': 'keyword.operator'
  # '"==="': 'keyword.operator'
  # '"!="': 'keyword.operator'
  # '"!=="': 'keyword.operator'
  # '">="': 'keyword.operator'
  # '"<="': 'keyword.operator'
  # '">"': 'keyword.operator'
  # '"<"': 'keyword.operator'
  # '":"': 'keyword.operator'
  # '"?"': 'keyword.operator'
  # '"&&"': 'keyword.operator'
  # '"||"': 'keyword.operator'
  # '"&"': 'keyword.operator'
  # '"~"': 'keyword.operator'
  # '"^"': 'keyword.operator'
  # '">>"': 'keyword.operator'
  # '">>>"': 'keyword.operator'
  # '"<<"': 'keyword.operator'
  # '"|"': 'keyword.operator'
  # '"++"': 'keyword.operator'
  # '"--"': 'keyword.operator'
  # '"..."': 'keyword.operator.spread'
  # 
  '"this"': 'variable.language.this'
  '"_this"': 'keyword.control'
  '"if_"': 'variable'
  '"self_"': 'variable'
  # 
  # '"in"': 'keyword.operator.in'
  # '"instanceof"': 'keyword.operator.instanceof'
  # '"of"': 'keyword.operator.of'
  # '"new"': 'keyword.operator.new'
  # '"typeof"': 'keyword.operator.typeof'
  # 
  # '"get"': 'keyword.operator.setter'
  # '"set"': 'keyword.operator.setter'
  # 
  # '"as"': 'keyword.control.as'
  '"if"': 'keyword.control.if'
  # '"do"': 'keyword.control.do'
  # '"else"': 'keyword.control.else'
  # '"while"': 'keyword.control.while'
  # '"for"': 'keyword.control.for'
  # '"return"': 'keyword.control.return'
  # '"break"': 'keyword.control.break'
  # '"continue"': 'keyword.control.continue'
  # '"throw"': 'keyword.control.throw'
  # '"try"': 'keyword.control.try'
  # '"catch"': 'keyword.control.catch'
  # '"finally"': 'keyword.control.finally'
  # '"switch"': 'keyword.control.switch'
  # '"case"': 'keyword.control.case'
  # '"default"': 'keyword.control.default'
  # '"export"': 'keyword.control.export'
  # '"import"': 'keyword.control.import'
  # '"from"': 'keyword.control.from'
  # '"yield"': 'keyword.control.yield'
  # '"async"': 'keyword.control.async'
  # '"await"': 'keyword.control.await'
  # '"debugger"': 'keyword.control.debugger'
  # '"delete"': 'keyword.control.delete'
  # 
  # 'jsx_attribute > property_identifier': 'entity.other.attribute-name'
  # 'jsx_opening_element > identifier': 'entity.name.tag'
  # 'jsx_closing_element > identifier': 'entity.name.tag'
  # 'jsx_self_closing_element > identifier': 'entity.name.tag'
